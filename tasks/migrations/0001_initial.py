# Generated by Django 5.2 on 2025-05-27 13:44

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organization', '0011_alter_organization_owner'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicate a deleted ressource.Select this instead of deleting ressource.', verbose_name='deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Name of the tag', max_length=300, verbose_name='Tag Name')),
                ('description', models.TextField(blank=True, help_text='Description of the tag', null=True, verbose_name='Tag Description')),
                ('can_be_accessed_by', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_can_be_accessed_by', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('org', models.ForeignKey(help_text='Organization this tag belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='organization.organization', verbose_name='Organization')),
            ],
            options={
                'unique_together': {('name', 'org')},
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicate a deleted ressource.Select this instead of deleting ressource.', verbose_name='deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Name of the task', max_length=255, verbose_name='Task Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the task', null=True, verbose_name='Task Description')),
                ('due_date', models.DateTimeField(blank=True, help_text='Deadline for the task', null=True, verbose_name='Due Date')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of the task', max_length=50, verbose_name='Priority')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the task', max_length=50, verbose_name='Status')),
                ('estimated_duration', models.DurationField(blank=True, help_text='Estimated time to complete the task', null=True, verbose_name='Estimated Time')),
                ('actual_duration', models.DurationField(blank=True, help_text='Actual time spent on the task', null=True, verbose_name='Actual Time')),
                ('assigned_to', models.ManyToManyField(blank=True, help_text='Users assigned to this task', related_name='tasks_assigned', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('can_be_accessed_by', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_can_be_accessed_by', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('depart', models.ForeignKey(blank=True, help_text='Department this task belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='organization.department', verbose_name='Department')),
                ('org', models.ForeignKey(help_text='Organization this task belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='organization.organization', verbose_name='Organization')),
                ('parent_task', models.ForeignKey(blank=True, help_text='Parent task if this is a sub-task', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_tasks', to='tasks.task', verbose_name='Parent Task')),
                ('tags', models.ManyToManyField(blank=True, help_text='Tags associated with the task', related_name='tasks', to='tasks.tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
